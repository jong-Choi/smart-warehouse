// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// 작업을 수행하는 주체의 유형 구분
enum OperatorType {
  HUMAN     // 사람 작업자
  MACHINE   // 자동 기계
}

/// 운송장(Waybill)의 처리 상태
enum WaybillStatus {
  PENDING_UNLOAD  // 아직 하차되지 않은 상태
  UNLOADED        // 하차 완료됨
  NORMAL          // 정상 처리됨
  ACCIDENT        // 사고 발생 처리됨
}

/// Operator는 작업을 수행하는 주체로, 사람(HUMAN) 또는 기계(MACHINE)일 수 있음.
/// code 필드는 사번 또는 기계 고유 코드로 활용.
/// createdAt은 등록 일시.
/// 관계: Shift (근무 기록), Work (KPI 집계), Waybill (작업한 운송장)
model Operator {
  id        Int             @id @default(autoincrement())
  name      String
  code      String          @unique      // 사번 또는 기계 ID
  type      OperatorType
  createdAt DateTime        @default(now())

  shifts    OperatorShift[]  // 해당 작업자의 근무 기록
  works     OperatorWork[]   // 날짜별 KPI
  waybills  Waybill[]        // 실제 처리한 운송장 목록

  @@map("operators")
}

/// OperatorShift는 작업자 또는 기계의 하루 출퇴근(가동) 기록
/// 동일 작업자는 하루에 한 Shift만 기록되도록 unique 제한
model OperatorShift {
  id         Int       @id @default(autoincrement())
  operatorId Int
  date       DateTime  // 날짜 (yyyy-mm-dd 기준)
  startTime  DateTime  // 근무 시작 시각
  endTime    DateTime  // 근무 종료 시각

  @@unique([operatorId, date])  // 1일 1교대만 가능

  operator   Operator  @relation(fields: [operatorId], references: [id])

  @@map("operator_shifts")
}

/// Location은 배송지 (예: 서울 강남구, 부산 해운대 등)
/// 작업자는 이곳으로 운송장을 배달하거나 배송 처리를 수행함
model Location {
  id        Int             @id @default(autoincrement())
  name      String          // 배송지 이름 (예: 서울 강남구)
  address   String?         // 상세 주소 (선택)
  createdAt DateTime        @default(now())

  waybills        Waybill[]        // 이 배송지로 전달된 운송장들
  operatorWorks   OperatorWork[]   // 이 배송지에서 작업한 결과 집계

  // 추가: 통계 테이블 relation
  waybillStats    WaybillStats[]
  salesStats      SalesStats[]

  // 연간/월간 통계 relation
  waybillYearlyStats   WaybillYearlyStats[]
  waybillMonthlyStats  WaybillMonthlyStats[]
  salesYearlyStats     SalesYearlyStats[]
  salesMonthlyStats    SalesMonthlyStats[]

  @@map("locations")
}

/// OperatorWork는 작업자가 특정 날짜에 특정 배송지(Location)에서 처리한 업무 통계
/// 하루 기준 단일 배송지에 대해 하나의 KPI 레코드
model OperatorWork {
  id             Int       @id @default(autoincrement())
  operatorId     Int       // 작업 주체
  date           DateTime  // 집계 날짜
  locationId     Int       // 어떤 배송지에서 작업했는지
  processedCount Int       // 처리한 운송장 수
  accidentCount  Int       // 사고 처리 건수
  revenue        Int       // 발생 매출 (정산 기준 단가 × 수량)
  errorCount     Int       // 기타 오류 수 (옵션)
  createdAt      DateTime  @default(now())

  @@unique([operatorId, date, locationId])  // 하루에 한 배송지당 한 번만 기록

  operator   Operator  @relation(fields: [operatorId], references: [id])
  location   Location  @relation(fields: [locationId], references: [id])

  @@map("operator_works")
}

/// Waybill은 운송장. 처리 정보를 모두 관리
/// Parcel과 1:1 관계로 물건 정보 연결
model Waybill {
  id            Int           @id @default(autoincrement())
  number        String        @unique        // 운송장 번호
  unloadDate    DateTime                      // 하차 예정일
  operatorId    Int?                          // 처리한 작업자/기계
  locationId    Int                           // 배송지
  status        WaybillStatus
  processedAt   DateTime      @default(now()) // 처리 일시
  isAccident    Boolean       @default(false) // 사고 여부
  parcel        Parcel?                       // 연결된 물건 정보 (1:1)

  operator      Operator?     @relation(fields: [operatorId], references: [id])
  location      Location      @relation(fields: [locationId], references: [id])

  @@map("waybills")
}

/// Parcel은 물건 정보. 가격 등 물건의 속성만 관리
/// Waybill과 1:1 관계
model Parcel {
  id            Int       @id @default(autoincrement())
  waybillId     Int       @unique        // 운송장과 1:1 관계
  declaredValue Int                       // 물건 가격

  waybill       Waybill   @relation(fields: [waybillId], references: [id])

  @@map("parcels")
}

/// Materialized View: 일별/배송지별 운송장 통계
model WaybillStats {
  date        String   // 'YYYY-MM-DD'
  locationId  Int
  totalCount  Int
  normalCount Int      @default(0) // 정상처리 운송장 수
  accidentCount Int    @default(0) // 사고 운송장 수

  location    Location @relation(fields: [locationId], references: [id])

  @@id([date, locationId])
  @@map("waybill_stats")
}

/// Materialized View: 일별/배송지별 매출 통계
model SalesStats {
  date        String   // 'YYYY-MM-DD'
  locationId  Int
  totalSales  Int
  totalCount  Int      @default(0) // 전체 운송장 수
  normalCount Int      @default(0) // 정상처리 운송장 수
  normalValue Int      @default(0) // 정상처리 declaredValue 합
  accidentCount Int    @default(0) // 사고 운송장 수
  accidentValue Int    @default(0) // 사고 declaredValue 합

  location    Location @relation(fields: [locationId], references: [id])

  @@id([date, locationId])
  @@map("sales_stats")
}

/// 연간 운송장 통계
model WaybillYearlyStats {
  year        Int
  locationId  Int
  totalCount  Int
  normalCount Int      @default(0) // 정상처리 운송장 수
  accidentCount Int    @default(0) // 사고 운송장 수

  location    Location @relation(fields: [locationId], references: [id])

  @@id([year, locationId])
  @@map("waybill_yearly_stats")
}

/// 월간 운송장 통계
model WaybillMonthlyStats {
  year        Int
  month       Int
  locationId  Int
  totalCount  Int
  normalCount Int      @default(0) // 정상처리 운송장 수
  accidentCount Int    @default(0) // 사고 운송장 수

  location    Location @relation(fields: [locationId], references: [id])

  @@id([year, month, locationId])
  @@map("waybill_monthly_stats")
}

/// 연간 매출 통계
model SalesYearlyStats {
  year        Int
  locationId  Int
  totalSales  Int
  totalCount  Int      @default(0)
  normalCount Int      @default(0)
  normalValue Int      @default(0)
  accidentCount Int    @default(0)
  accidentValue Int    @default(0)

  location    Location @relation(fields: [locationId], references: [id])

  @@id([year, locationId])
  @@map("sales_yearly_stats")
}

/// 월간 매출 통계
model SalesMonthlyStats {
  year        Int
  month       Int
  locationId  Int
  totalSales  Int
  totalCount  Int      @default(0)
  normalCount Int      @default(0)
  normalValue Int      @default(0)
  accidentCount Int    @default(0)
  accidentValue Int    @default(0)

  location    Location @relation(fields: [locationId], references: [id])

  @@id([year, month, locationId])
  @@map("sales_monthly_stats")
}
